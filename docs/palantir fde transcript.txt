With AI agents, there is no incumbent product. And so that I think is why you're seeing the FTE model taking off
0:06
because there's so much product discovery to do. You want to drive the contract size up. So you're doing more
0:12
and more valuable work for this customer and also for future customers. The FD
0:17
model effectively is doing things that don't scale at scale.
0:22
[Music]
0:29
Hello and welcome back to another episode of the light comb. Gary wasn't feeling great today and couldn't be here, but we're thrilled to be joined by
0:35
Bob Mcgru. Bob was an early engineer at PayPal, an early executive at Palanteer, and was recently chief research officer
0:42
at OpenAI, where he led the development of chat GBT, GPT4, and the 01 reasoning
0:48
model. Now, he's exploring the future of AI and has an exciting new role with the US Army that we'll get to in a bit. Bob,
0:54
thanks so much for being here. It's great to be here. So, Bob, I've been particularly excited to sit down with you to talk about the
1:00
Ford deployed engineer model because this is a topic that keeps coming up in our lives. It is a really hot topic in
1:07
Silicon Valley right now and especially among the AI agent companies that we've talked about on this podcast a lot. You
1:12
were in the room when it all got started and so you know like you're exactly the right person to explain it. You were
1:18
actually telling me a a funny story. uh you were at an AI conference that YC
1:23
organized a few months ago and you expected that all the founders would come up to you to talk to you about you know inventing chat GPT and instead what
1:31
all of these AI startup founders wanted to talk to you about was the Palunteer 4 deployed engineer model well and it it's really true it hasn't
1:38
hasn't just been that one conference uh as I've been advising startups this last year I would say that a lot of them are
1:44
pretty much exclusively trying to learn how the FD strategy works yeah so there's is this intense topic a
1:50
fascination and it's super timely because it's actually become I think the dominant way that the AI agent startups
1:56
are organizing themselves. I was looking earlier today and if you look at the YC
2:01
job board there's over a 100 YC startups that are hiring for a job with the title
2:06
for deployed engineer and up from basically zero 3 years ago. Perhaps before we get really into it for anybody
2:12
who doesn't already understand, can you just explain what a forward deployed engineer is and how it's relevant today?
2:18
So a forward deployed engineer is someone typically technical and engineer who sits at the customer site and fills
2:26
the gap between what the product does and what the customer needs. And how does this play out in practice?
2:32
You'll have a product and you go to a new customer. you you start working with
2:37
a new customer and you the the problem that they want you to solve is not a
2:42
problem that you've ever solved before but you believe that it's one that with a little bit of work maybe a lot of work
2:48
you can solve for this particular customer and you'd be making a huge impact for them you'd be delivering an
2:54
outcome to them that would be extremely valuable for them so you take the product that you have and the FTE with
3:00
help from the product team figures out how to deliver that outcome how to build that use case how to you deliver the
3:06
piece of software that you've built in a way that actually works for the customer. To go all the way back to the beginning, you were there at Palunteer when this
3:13
whole model that is now like exploding in Silicon Valley was invented. Can you talk about how it all got started?
3:19
The interesting way to think about the beginning of Palunteer is that uh when we got started, the focus of our company
3:25
was to build software for the intelligence community, specifically software for spies. And so one of the
3:30
challenges in building software for spies is that I don't know any spies. You probably don't know any spies
3:36
either. Nope. And uh if you happen to find a spy and you go and ask them, "So, what is it exactly that you do?"
3:43
Um they're not usually going to tell you. And so um we had to take an approach
3:49
that was sort of very unusual at the time, but effectively we started by building a demo and we took that demo to
3:57
potential customers in the intelligence community. And uh you know Stefan Cohen very famously did this, one of the
4:02
founders of Palunteer. And he showed them the demo and he said you know well what do you what do you think? And they
4:08
said well this is terrible. This isn't related to what we do at all. And he said oh well how would you like it to be
4:14
different? And then you know they would say oh well could you make this change and this change? He's like sitting there writing all of this down. So far this
4:21
story feels very much like you would the standard advice you would give to
4:26
founders today, right? that you have to go you have to make something people want. You have to get out of the building. You have to go talk to
4:31
customers. I think we were we were doing this back in the in like the mid 2000s. And so, you know, there's a little bit
4:36
of that meme where like I spent years mastering this technique and Paul Graham just tweeted it out for everybody. Mhm.
4:42
But the thing that changes uh and that really causes the FD strategy is that
4:48
what you expect and the the standard thing that you expect is that you spend a lot of time early on, you know, doing
4:53
things that don't scale, going out and visiting customers, getting very close to the customers and then you discover
4:59
product market fit. And once you discover product market fit, you know, if you and this is class, you know, if you read Crossing the Chasm or any of
5:06
these books, once you discover product market fit, you do something entirely different. So, you know, instead of
5:11
going, you know, staying deep with the customers, doing as much as you can to really understand the customer, instead you want to embrace distance from your
5:17
customer and all you want to focus on is scaling. How do you sell more? How do you treat all customers exactly the
5:22
same? And you know, I I I think I want to say that if you're in a business where this is working for you, that's
5:29
great. Don't do the FDU strategy. You have been given an amazing gift. Uh if
5:34
you have the opportunity to just scale, treat all the customers the same, go ahead and do that. Um but it didn't work
5:40
for us and I think this is where uh Sham Sankar who's very early employee you know now I think the president and CTO
5:46
of Palunteer he really invented the FDA strategy and the the basic thing we
5:52
found was that the customers that we had the product that they needed was
5:58
slightly different at every place and so we moved from one customer building a
6:04
product for them we went to the next customer we saw they had something was slightly different And instead of sort
6:09
of building two products or building the exact right feature for each of them at each at each site, we built something
6:16
that was more a platform than a product that had the a lot of a lot of ability to be customized at each site. So when
6:22
you do that, well, okay, you need to bring someone to the site to understand what the users are are doing and you know, build customization and
6:29
historically that's been understood as services, right? So that's something you want to minimize. You don't want to be
6:34
doing a lot of work per customer in this, you know, product market fit. And what Shawn realized was that you can
6:40
actually flip this around and make it valuable. So what he realized we needed
6:46
was for the FTEEs to act as product discovery. So they would go to the site, they would take the product as it was
6:52
and they would fill the gap between what the product did and what the users
6:57
needed. So you know the FD goes and builds like a a gravel road to where the product needs to go. And then the role
7:04
of my team of the the product and engineering team was to look at that and basically figure out how that should
7:10
generalize to the next five customers or the next 10 customers and then turn that you know gravel road into like a paved
7:17
superighway. I feel like sales is product discovery is a concept that's not new. It was certainly around before Palanteer but
7:24
typically the view used to be like you had your sales people that went out and did like the sales and talked to the customers and they came back and
7:29
reported to the engineers. But it seems like at Palunteer it was like the engineers were doing that work. Was that like a conscious decision or how did
7:36
that come about? Especially when you're selling into like the government and defense like you would imagine the natural inclination is to go hire some
7:43
like experienced salesperson who's got a history of selling into the government and some like Don Draper like who wears a
7:49
suit and worked in the DoD for 20 years and like takes generals out to steak dinners and things like that. And that's
7:54
actually not what you guys did, right? Well, I mean, there's two angles. This one is, uh, we talked to a lot of those
7:59
people early on and they said, "Why the hell would I work with a Silicon Valley company when I could work with, you know, a big five defense prime?" Uh, and
8:06
then even when we talked to people who, you know, seemed like they might be successful in this role, it was just
8:13
very clear to us that they wouldn't mesh with our culture and they wouldn't actually be successful. And when we tried doing something like this, it
8:18
almost never worked. And so, what we found was very different. And and I think the difference between salesled
8:25
product discovery and FDLE product discovery is that salesled product discovery you're talking to people from
8:31
the outside. And again, this is important very early on, but it's not as effective as the FDLE product discovery
8:37
where you're solving these problems from the inside. So, you know, the scope of a
8:42
of a traditional implementation might be you start with something that's pretty close to what the product does, but you
8:48
want to be solving one of the key problems that leadership has identified. If you're not solving one of the top
8:54
five priorities for the CEO, it's probably not going to work. They probably won't have the energy to persist through the much more
9:01
challenging route of getting effectively a new piece of the product built in a way that worked for them. Then once
9:07
you've solved that first problem, then the FTEES can, you know, identify other
9:14
key problems in the enterprise, sometimes much more valuable problems than the ones that you were first
9:20
targeting that maybe it's not obvious that Palunteer could have solved those problems or that your company could
9:25
solve those problems, but once you're there, you can see through product insight that you can actually do this.
9:32
And then you go and solve those problems. And so it switches from, you know, how do I sell the same thing to
9:38
each customer to how do I land and expand? Bob, can you lay out sort of exactly how
9:44
the FDU bottle works at Palunteer? Like if you were giving people almost like an an instruction manual like like here's
9:51
how we did it. Yeah. So I think a starting point is to think about how the team was structured.
9:56
Um, and of course there's many different iterations, but I think this is this is the the key thing that remains constant
10:01
is that the two key roles are those of what we call the echo team and the delta team. The echo team were embedded
10:09
analysts. So they would go to the customer site, they would speak to the users, they would uh try to figure out
10:15
what demo or what use case uh really made sense for the users at this site.
10:21
What was the key problem that could be solved? And they would also be the account managers. So they would also be the people managing the relationships at
10:28
the customer site. And the delta team uh the deployed engineers were effectively
10:35
software engineers typically very good at writing code extremely quickly eating
10:40
a lot of pain as we put it. And they would be the ones who sort of
10:46
took those ideas and brought them into the real world and built a solution, a
10:52
prototype, but something that could actually work. and then deploy that uh for the customer. And all of this would
10:59
come in a very short period of time. So, you know, you go in with an idea for what you're going to work on. You set
11:06
up, you know, a few months in that you're going to, you know, have a presentation with leadership to show
11:12
them your progress. And then if that presentation goes well, then you're going to actually deploy and go, you
11:19
know, organizationwide. The interesting thing about these two roles is very different kinds of people and profile.
11:27
How would you even go about finding the right person to be in these roles? Because it's not just a regular engineer
11:32
that could fit FD. They needed to have more of that talking to users or the echo team also have to be more
11:38
technical. It wasn't just an account manager. How do you Palanteer build this early team?
11:43
Yeah. So the echo team, you know, a classic profile for someone to join your
11:48
echo team would be someone from the domain you're working in. So, you know, possibly a former army officer or
11:55
someone who worked deeply in healthcare. So, they have deep domain knowledge, but and this is really important, they need
12:00
to be rebels or Sean would probably call them heretics. They need to be someone who understands how things are done right
12:08
now and recognizes that it's insufficient, that it doesn't work. Because if if their perspective is, you
12:14
know, they come from this world, it's great, then they're never going to be able to figure out the step function
12:20
change that the new software has to be able to make because if you can't make some sort of, you know, 3x or 10x change
12:28
within that organization, then, you know, there was no reason to go through all the effort of doing this. Um, you
12:35
might as well have sold some sort of like very simple piece of software. So that's that's the key profile for the echo. And then for your deltas, um, you
12:42
want someone who's really good at prototyping. So the wrong profile for a
12:48
delta would be someone who's a craftsman, who really loves, you know, making sure the abstractions are exactly
12:54
right, that, you know, they're building software that's going to be maintainable for, you know, a dozen years, right?
13:01
Because that's not the role. That's not the job. And what you want is someone who can go in, you know, figure out,
13:06
write some rough and ready code. Sometimes that code is beautiful if you get the right person, right? But usually not that again that's not the key
13:12
portion of the job but someone who can who can go actually deliver that outcome in the form of software on a timeline
13:20
and then it may be the case that the first version they write has to be thrown away and maybe they write a
13:26
complete second version maybe someone else writes a second version depending on that person but those are those are the key sets of skills.
13:32
It does sound a lot like a founding team. Yes. It sounds a lot like a founder. Yeah. Would you hire former startup founders
13:38
and turn them into these roles or did it go mostly the other way? I mean, I think it's no coincidence that Palunteer has
13:44
spun off like an incredible number of startups because this FD training, this is like exactly the training to become a startup founder, you're learning all all
13:50
the startup founder skills, right? But did you go in the other direction too? You know, back in the day when we were getting this started, uh there was not a
13:56
huge supply of founders for us to pull from. Uh I I think, you know, maybe they maybe that's the opposite now, but but I
14:02
think it's I I think you're actually quite right. what you're doing uh you know in each of these new environments
14:09
at each of these customer sites is a little bit like being a startup founder but you're a startup founder where you
14:14
have access to some very powerful piece of product leverage that makes your job easier. This is I think great training
14:21
and like you said this is why you see so many startups from Palunteer founders. So the the common knock that you hear on
14:27
this from people who don't really know what they're talking about is like oh it's just consulting dressed up with fancy marketing speak. Why is that
14:34
wrong? I think before I say I don't want to tell you glibly why that's wrong because I think there's actually a real
14:40
risk that it's right. Right. And I think you know if you if you go back to 2015 and you talk to people about Palunteer
14:47
maybe you would hear two things. One that Palanteer is evil. Um but the second thing you hear is that it's a consulting business that is never going
14:53
to scale. you know that it's actually like a bad business. It's not a software business. And we spent a lot of time
14:59
trying to understand whether that was a correct characterization or not. From a business model perspective, one of the
15:05
key things that you will see that you should see is that it may be the case that your when you go into you do a new
15:13
deployment at a customer that you're actually losing money early on. As the longer you're at the customer, first
15:19
thing is your product because of the product discovery gets better suited to what the customer does. And so you no
15:24
longer need a large team of people at the customer site figuring out what the customer is doing, you know, paving, you
15:29
know, writing that code. The second thing is that you should be earning the right, as Sean would put it, to have
15:35
access to more important problems at the customer site. And so you should see
15:40
basically that your cost per value of the outcome you're delivering is going down. And so your profit margins start
15:47
off negative but then ultimately become positive after some period of time, maybe a year, maybe multiple years at
15:54
the customer site. And if you look at it from that perspective, you can see that you're actually delivering, you know,
16:00
real repeatable value. I guess one fascinating piece to make this work and drive the cost down is
16:06
really the product team. Yes. So how does the product team fit in and work with uh with FDE team? I think on
16:14
the engineering side uh it actually you know it it feels my my job on the as an
16:19
engineer was actually not so bad because early on in the early days of Palunteer you know we were you know doing this founder led discovery and we were you
16:26
know building new products and later on at the later days of Palunteer we were still doing that we were still building new products this felt great right um
16:32
but the roles that were really different are um the the FD team but then also the product management team and so um the
16:39
product that you're building instead of being highly verticalized And you know this is one flow that
16:45
millions of people are going to be going through like if you're building Airbnb right instead the role of the product
16:51
team is is really to hold the product vision and so you have to think when I see this
16:58
new problem that we're seeing at a customer site what is the generalizable version of this that applies to the next
17:05
10 customers because if you you know there's a a classic failure mode here where you know the FD implement
17:13
something for one customer and you say great well that's how you should do it and you bring it directly into the product and it turns out if you do that
17:20
you're building something that's over specialized for one customer and so the part of the magic here is being able to
17:26
build the kind of product and with the the kind of product people they can look
17:31
at that and sort of guess the correct problem that you're solving which is always a little bit more general than
17:38
the problem that the customer is coming in with so there was some wisdom um to figure out which bucket it fil fit. Is this
17:44
just for this vertical or it could be generalized? So could you give us like an example of what that looked like in
17:50
terms of the products and verticals and what fit in one bucket versus the other one? Yeah, I mean probably the the sort of
17:57
like most basic example here is is sort of the invention of the Palenter ontology itself. And so when we first
18:04
started talking about working with, you know, the US government and specifically working intelligence, you know, should
18:09
we have a database table for people and a different database table for money and a different database table for this? And
18:15
this is super obvious, I think, at this point. If you if you go down that route and you try to deploy to multiple people, your your database doesn't make
18:21
any sense. And so, you know, the the change here was say, well, we need to pull this up to a higher level of
18:27
generalization. And instead of thinking about specific types of objects um we
18:33
should allow that to be defined per customer by the forward deployed engineering team. And so that's the sort
18:39
of origin story of where Palen Palunteer famously got its ontology. So how does that work today? Is there like a base database schema that has
18:47
common reusable objects like people and money that then gets customized per site? Well just I mean the database scheme is
18:53
extremely general. there's just this notion of objects, properties, media, and links between objects. And in here,
19:00
I'm talking about Palanteer's government uh product, um which was our first product. But the ontology is what
19:06
encodes all of the specialized information that's per customer. And you
19:11
know, that says, oh, well, this is, you know, a person, this is a ship, this is a money flow. And again, this is this is
19:17
I think really the very most basic example, but you know, if you build something for just one customer, then
19:23
you're going to be thinking in, you know, the description that applies to
19:28
that customer. But instead of saying, "Okay, well, for people we do this," you want to be able to pull it up a level
19:34
and say, "Okay, well, there's this common operation that we want to apply to things that have this property." Like
19:40
people have this property, but maybe also ships have this property, but let's be honest, money payments do not have
19:46
this property. And so, you have to think at a higher level of abstraction. We didn't hire product managers for a long
19:52
time. And when it did come time for me to hire product managers, I would interview people who were amazing product managers at, you know, other
19:59
companies. And I would ask them to to think at this level of abstraction. And they were very they couldn't really
20:06
think at this level of abstraction. They would say, okay, well, this is the flow. This is what it should look like for this customer. But that that was the
20:13
wrong thing to do here. And they needed to to pop up a level and think at the level of like, how does this work in the
20:18
context of the ontology? How do we change the ontology so that you know this specialized thing works across
20:23
customers? And of course there's many other examples that don't have anything to do with the ontology. Does that create any sort of cultural tension at Palinger itself? It
20:30
sounds like you're describing like the FDES are sort of these like heretics. They like don't want to generalize. They
20:35
want to do what's best for the customer and um build specialized solutions. But presumably for your own internal product
20:40
team, you do actually want to hire the people who can think at some level of abstraction and want to build like maintainable code that lasts for a
20:46
while. Surely that must have created tension somewhere where there's an FDE who's like no I don't want to use like the like the generalizable ontology. I
20:53
want to kind of like do it this way. Well, I mean absolutely there was there was always a lot of tension and I and I I I I would not frame this so much in
20:59
terms of like the skills that different people had because it was also very you know I think it's a lot about the environment what people do in the
21:05
environment they're placed in. It was also very common for FTEEs to work in the field for a long time and then say, "Hey, I can I can really fix these
21:12
products and then come in and do an amazing job, you know, on the product side and think at that level of abstraction." But when you're at the
21:18
customer site, you were faced with one very The incentives are different versus the skills are different. The incentives are different. And so,
21:24
you know, you're solving one very particular problem and it makes a lot of sense to just take the simplest approach
21:29
to solve that problem. Um, and and that is in fact what the FD should do. That's what the gravel road looks like. And
21:36
then the paved road though, you know, has to has to go by not just this one customer, but like a bunch of other customers that are further down the
21:42
road. So the paved road often looks a little bit different. But the flip side of this though is, you know, imagine you
21:47
said, well, clearly this FD approach is just wrong. Like the FD is building the wrong thing. What if the product team just thinks really hard about what to
21:54
build and then they go build that? They're absolutely going to build the wrong thing. In fact, the the way that we would often build features early on
22:01
is that, you know, first the FD team would build something, they'd see something at one customer, we'd bring it
22:06
back to the product team in PaloAlto and we would say, "Okay, what's the right generalized versions?" And that those FDEs would participate in those
22:12
discussions, right? That was incredibly important. And then we'd identify several other
22:17
customers. Well, if it worked for this customer, we think it could work for this other customer. So let's bring the
22:23
FDS from those customers in as well and help them design and they they can help us design this feature so that when we
22:30
build something we know it'll work for you know the customer it was initially prototyped and we know it will work for
22:35
these others and then of course you know if you're once you've built that context where everybody can say here are three
22:41
different workflows that are subtly different then suddenly you're not having this argument about like well you know we think it should be general and
22:47
we think it should be specific but everybody is solving the same problem and then I think that that really melds
22:52
the incentives. Do you feel like it requires a lot of organizational discipline to keep this model from devolving into pure
22:59
consulting where the FTE teams are just off building like whatever product the customer needs?
23:04
Yes. Uh you absolutely have to focus on this. Um and I I think one of the other
23:12
failures by the way it's even prior to that and and more the the easier failure to become a consulting firm. It's where
23:18
you build the product in the field that the customers are asking for rather than the one that's actually
23:23
valuable to them. Because it's often the case that the customer, right, you don't actually
23:28
customer is like a whole organization. You don't talk to the customer. You talk to maybe the CIO, right? Or you talk to
23:33
one sponsor, usually a couple levels down from the CEO who you only get to see every once in a while. And it's
23:40
often the case that they would rather just have you solve some problem that's easy for them to have you solve rather
23:45
than one that's really impactful and improves the business. Going back to the opening from Jared,
23:52
what's going on with all these AI companies really now ramping up and
23:58
hiring tons of FDES? What has what had caused them to really adopt this model
24:03
which was not the case for the previous generation of companies with SAS? What happened? Especially because I feel like
24:08
even as Palanteer became successful and the FD model became more known, it was still seen as well, you that's a one-off
24:14
thing because Palanteer is a unique company and selling to the government. Yeah. Like like a like a like a really
24:19
weird thing. Yeah. But you wouldn't don't try this at home mindset, right? Like now everyone's sort
24:27
of it's become like Diana said, it's become very common place. Has that one has that surprised you? And then two, like why do you think that's happened?
24:33
This was absolutely a surprise to me that you know my first, second, and third pieces of advice to people who are thinking about trying an FD strategy is
24:39
like don't don't do this at home. If you can avoid it, like it's it's probably bad for you. Probably you're going to
24:45
end up doing services and then only if you really try hard not to do it and fail then well then maybe actually it's
24:51
a moat for you if it's the only thing that can possibly work in your market. So what's special about this market,
24:56
right? Why does the AI agents market uh work this way? Maybe the the starting place is why did Palunteer have to adopt
25:03
this? The Palunteer market is not one coherent market, right? So, we were
25:09
working with national intelligence agencies, with national law enforcement,
25:15
with the military. All of these organizations had some similar projects,
25:21
right? But even, you know, the difference between a counterp proliferation workflow and a counterterrorism workflow. one you're
25:27
trying to figure out, you know, who's building bombs and the other one, well, who's building nuclear bombs and who's
25:32
building IEDs and those are actually quite different in terms of how they work. And so there's this incredible heterogeneity and the market, you should
25:40
really think of the market as different segments inside each segment. You can build something and you know the
25:47
crossing chasm story a little bit applies. So you know you're you're starting off you know nothing seems to
25:53
work suddenly you find product market fit in the segment you know you can deploy the people that are doing this
25:58
kind of workflow and then you know at the next customer you find the same people doing a similar workflow and you
26:03
can deploy with very little customization but then there's a natural limit to that and so now you want to go
26:09
tackle a different market segment and you have to you know develop a new piece
26:15
of technology and then that can be referenced in in other market segments. And like like I'm sort of saying here a
26:21
segment is not the same as a customer necessarily. Um especially in an enterprise or a very large enterprise
26:27
like the government where a customer is you know tens of thousands of users
26:32
potentially in that case that's where you know the FD strategy matters because
26:38
you're doing you know it's like you're doing things that don't scale but you're doing it scalably over and over again
26:44
for every market segment that you enter. Why do we see this with AI agents? I think the other thing that's unique
26:50
about Palunteer is that we were building a completely new type of product. The product that the users saw well you know
26:57
they were used to basically you know tracking doing their analysis and tracking people in a tool that looked
27:02
like PowerPoint and they would collaborate by sending these files back and forth with each other. But the product we built was tied basically
27:10
said, "Hey, when you're, you know, drawing out that link diagram, you're not just editing a file. You're actually
27:17
changing a database and everybody has the same database." And so, while to the user, it looked like an a small change
27:24
on top of the the work they were doing. To the enterprise, to the organization we were selling to, it was a completely
27:30
different market category. And that I think is what's happening with AI agents where you know this is a completely new
27:37
market category. If you are implementing you know a standard SAS product and
27:42
you're replacing one way of paying bills with a different way of paying bills everybody understands what that market
27:48
is. And so you know the the segment you know there's not all this little segmentation. There's not a lot of
27:53
there's not the same kind of product discovery. you can then you know make a product that's better than the incumbent product and scale by replacing that
28:00
product with AI agents there is no incumbent product and so um also I would
28:06
say what it is to build AI agents is actually probably a lot of different things and we don't know what those are
28:13
yet we've got to figure them out probably in five years we'll look back we'll be like well AI agents it wasn't
28:18
even a thing at all right we were actually doing all these different things and so that I think is why you're seeing the FTE model taking off because
28:26
there's so much product discovery to do and you can only do it from inside the enterprise. Okay. How does this relate to um some of
28:33
the classic YC advice which is do things that don't scale? Well, that's the advice that you give to
28:38
an early stage founder and the FD model effectively is doing things that don't
28:44
scale at scale. YC's next batch is now taking applications. Got a startup in you?
28:50
Apply at y combinator.com/apply. It's never too early and filling out the
28:55
app will level up your idea. Okay, back to the video. Since you see a lot of people trying to
29:01
apply the FTE model now to their new startups, including a lot of people who didn't work at Palunteer and are sort of
29:07
doing it like second or third hand, what are ways you see people getting it wrong or misconceptions that you'd like to
29:13
dispel? Maybe I will start by saying as I've advised a few different startups who are doing this. I think the startups
29:18
the most successful startups doing the FD model have people from Palunteer running the FD model. The startups that
29:25
are that I've talked to who are switching to the FD model gained a lot of benefit by bringing on someone from
29:30
Palunteer in, you know, one of the core roles. As I said, the engineering team is often fairly similar, you know, but
29:36
maybe, you know, continues to be fun for a long time. uh but the actual mechanics of how the FDS work, how you build these
29:44
accounts, how you find the outcomes, those are those are actually quite different from a standard software uh
29:50
firm. And so one of the the key differences uh and and something that I
29:56
think is actually quite difficult for people to understand is uh how you
30:01
choose a problem and then how you price that problem. And fundamentally what
30:07
you're selling with the FD model is that you're not selling the installation of software. You're selling an outcome. As
30:14
Sean would say, you're selling that you have solved a problem. The next question then is if you've now solved a problem
30:22
that is valuing, you know, delivering some value to the users, how do you price that? That's a very common
30:28
question we get from all these AI startups because in the age of SAS you would do it based
30:34
on usage or subscription or seats and this is completely different is outcomes. How do you even price it? How
30:41
should all these AI founders price their solution? Yeah. And I think one of the the the
30:48
really important things that is differentiated between the FD model and your sort of standard SAS model is that
30:54
with the FD model with a SAS model and you know product market fit you're going towards you know very simple repeatable
31:00
contracts very simple repeatable pricing that makes sense across all of your customers and you know often you're
31:07
you're going to be quite comfortable with small contracts because the cost the marginal cost to deploy is very low
31:13
with the FD model you're going to get pushed towards larger and larger contracts. Um, like we talked about, you're going to be growing contracts per
31:20
customer over time. The contracts because they're complex are going to be more flexible.
31:26
I think this is what the AI startups that we work with discover on their own. I have this company called Castle that
31:32
does uh AI voice agent for mortgage servicing. So they work with very large
31:37
banks and the way they actually been able to go live with large banks is exactly that model of ramping up is the
31:44
number of successful calls that were handling all these mortgage requests. Then they had like stipulations when it
31:50
goes to scale it would be this much and that and they kind of figured out on their own and other startups as well uh
31:56
like Happy Robot is another YC company as well doing AI voice agents for logistics. They're working with large
32:01
companies like DHL similar thing. There's an asymmetry here between you, the startup, and the business that
32:07
you're selling to, which is typically when you're selling to a large enterprise, they don't believe they can
32:12
actually accomplish anything. And that's because often times they've had many large projects that have failed. They
32:18
also don't believe you can accomplish anything, right? Because they think that you, the startup, are just like them.
32:24
You, on the other hand, know that you can actually execute, right? And if you can't, well, you should go into a different line of business anyway,
32:30
right? And so early on it makes sense for the startup to just take on all the
32:36
risk and say we're going to just believe in our own execution
32:41
and you know we're going to take on the risk and you pay us if it works or you pay us when you know we're actually able
32:48
to expand. The one place this can go wrong is that particularly if you're
32:54
doing a something that needs to be deployed into the enterprise uh you know on premise uh or any piece of it needs to be on
33:00
premise rather than in the cloud you do have to fight the IT team. Yeah, actually seeing that too.
33:06
Yeah, with some of these companies and more generally who needs to say yes inside the organization you're deploying
33:12
into in order for you to succeed because those people do not think like startups.
33:18
they are not aligned with the end user. And so you're going to have to figure
33:23
out a way past them. And you know, this is part of why it matters that you're
33:29
working on one of the CEO's top five problems because you need to be able to bring in someone from the top to say,
33:35
"Yes, give them authority to operate. Give them, you know, the ability to use,
33:41
yes, you use this particular type of database. They need to use a different type of database. they you know you have
33:47
all these spec very specific organizational things that are meant to apply to your IT staff who are building
33:53
things in house but they don't apply to the startup let them do what they need to do how do Palenter get that executive buy
34:00
in I think this is sort of what happening with all these AI startups that taking off and going from zero to
34:08
seven eight figures in revenue within a year they figure out the executive buyin but it's all very haphazard I would say
34:16
from all the stories I know of. That's how it felt early on, too. Okay. Right. Um, it's a discipline. It's a
34:21
skill. You know, you need really amazing leadership on the FDA team to be able to have that kind of discipline and, you
34:29
know, to share what works, you know, and just get the practice of doing it at one customer. I mean, I think it's not
34:35
surpris. That's that's why, you know, the c the
34:41
companies I've seen that have done this the best have sort of pulled that from people who've done it before. Um, but it
34:48
can be learned. We learned it. Jared point out earlier that the I think this the palenteer forward deployed
34:53
engineer model is not that different to sort of like classic YC advice around doing things that don't scale. Um, we
34:59
have this concept of like the Collison install, which is essentially we boil it down to don't wait for people to turn up to your website, like go to them and get
35:06
them to like install the software and like physically go to them, like go to their office and like sit next to
35:12
them. And I feel like um it's always been a great starting strategy, but most
35:17
startups aren't getting big contracts off the bat. So actually the the reason they have to stop doing sort of like
35:23
this sort of manual hight touch process is you just can't get the growth rates to sustain without at some point having
35:30
a product that scales. And it's kind of like what we were talking about earlier like at some point you hopefully you build a product that's so good that
35:35
people can figure it out themselves and then all of your problems are just scaling it. With AI what's different is because these contracts are so big now
35:41
you can actually go quite far by doing like the hightouch thing. And maybe something you could help us out with
35:46
actually is like probably a common office hour question I get is like how far can I keep pushing this? And my advice is largely like well like it's
35:54
okay to be doing custom work per customer. You just want to get less custom per every customer. Maybe you
36:00
could give like more specific like higher resolution advice. It's like how do you know if it's okay to like keep
36:05
adding new customers in this sort of like hightouch like I'm doing lots of custom work way versus oh no actually I
36:12
need to be like abstracting out um and building like an actual product here. Yeah. And I and I think this this is
36:18
actually really encapsulates the the key difference between you know the the product market fit strategy and the FD
36:24
strategy. In the product market fit strategy you want to be doing less work for every customer. You want to be driving down costs. You want to keep the contract size the same. Yep. In the FDA
36:32
strategy, you want to drive the contract size up. So, you're doing more and more valuable work for this customer and also
36:39
for future customers. And because you're doing more valuable work, it's okay. You can leave the amount of customization
36:46
you do per customer the same. So, the KPI or the internal metric is like contract size, not necessarily like
36:52
how much custom work they're doing per customer. There's two useful things here. So, one, the thing you can measure, yes, contract
36:58
size. Um, I would even be a little bit more general than that and say the value
37:03
of the outcome you're delivering because that's that's actually the true thing, you know, and do you yet have the
37:09
muscle in order to be able to monetize that and price that and capture that? Maybe not. But if you're able to deliver more and more valuable outcomes to the
37:15
customer, then you know you're you're doing something right. The second piece that we haven't we didn't talk about yet
37:22
is uh the value of the product. And so the other thing you want to measure is are you getting more and more product
37:29
leverage against that outcome. This is all extremely counterintuitive when
37:34
you're in it. It's very hard if you're an FTE or if you're leading an FTE team. There's a lot of things you have to do
37:40
that that seem very counterintuitive. You have to, you know, build for the customer things they're not asking for but that they actually want. On the
37:46
product side, you often think to yourself, how do I make a product that's just really easy for every customer to
37:52
use? It's very easy. And and look, I I I struggled with this myself quite a bit leading product early on like you want
37:59
to focus on on the user experience and you have to do that, but you also have to remember your other key customer is
38:05
the FTE. Your product should be, you know, ultimately delivering a good thing to the user after FTE customization, but
38:12
it should be delivering leverage to the FTE who's delivering that outcome at the
38:17
customer site. And that that amount of product leverage should be going up over time. like they should be able to use
38:23
your product to deliver more value to the customer without them having to go and like pull in three more engineers in
38:29
order to do it. That's right. If you know the first customer you deploy at takes a lot of work. If you want to then go sell that
38:35
same outcome to a different customer, then that should be a lot easier at the second customer and it should get easier
38:41
still as you go customer by customer. But then if you if you really get it to work, remember that you're building a
38:46
platform. So you're doing more than just, you know, a stack of vertical use cases on top of each other. If you've
38:52
correctly abstracted away what the core concept is that you're really building,
38:59
then you should also have an easier time. You should have more product leverage even when you're not doing that
39:04
use case, when you're doing something that's sort of similar. Or you will find that your FTEEs, if it's a really if
39:10
it's really good, you'll find your FDES can figure out some new way to use that technique you built to solve something
39:16
completely different. There's almost like an internal market dynamic going on where like if you've built it really well then the FD should like choose to
39:21
use it and you should see demand from the FD to use your sort of like abstracted product versus just like
39:27
hacking a one-off solution themselves. Yes. Um although I will just note this is a very painful process for everyone
39:33
involved. Uh I probably can't use the word pain often enough uh in the FDE. You know there are many times where I
39:39
built something I thought it was amazing and I thought it was beautiful. Not not there yet, right? But it would it really would help the FTEES as soon if they
39:45
just had the the ability to see it. And I'd be like, "Please use my product." They'd be like, "No, it's just this is
39:51
way more work. It's like not helpful." And I will say, uh, let's be honest, most of the time I was probably wrong and I was building the wrong product for
39:57
them. And, you know, I should see that. But sometimes also I was on the right track, but you know, I I hadn't done enough to make it easy for the FTEEs to
40:04
use. And so, you know, I would send, you know, the developers out into the field
40:09
to deploy th those early solutions and get them over the line even to the point where the FDES could use them
40:15
profitably. Are the FTEs always right in that case or is like should the founders sometimes be just top down and say like actually I
40:22
just want you to do that do it this way. I I mean the the answer is like yes to all all of these things. The other thing
40:28
that comes up over and over again is just how much the right answer here is a matter of judgment. Um, and I think I
40:34
think going back to this question about product vision, right? Like what is the right product that generalizes from, you
40:40
know, this customer to the next three to the next 10, you you very literally do
40:46
not have the the information needed to answer that when you see that first customer. And so it's just it it becomes
40:51
a judgment call. So in the context of how all these FTE companies price very
40:57
differently based on outcome, how does that fit in with now the culture doing demos? Because there's
41:03
there's this thing in at least in SAS or I used to get this push back from my engineers demo driven product
41:09
development. It would be sort of looked down upon but in this case it's different for FDES, right? One of the interesting things that
41:15
happens there is because you have to go repeatably show this to new customers, you're forced to give these new demos.
41:21
But but actually I think demo driven development works really well if you have the right kind of product. So you
41:26
know in the early days of Palunteer we actually had one demo. It was a flow where you're you know stopping a
41:32
terrorist plot and we started this with you know just one of our features and every time we integrated a new feature.
41:38
We had to think to ourselves how do I show that this new feature is actually helpful for the analyst who's going
41:45
through this demo who's stopping this plot. You know when we integrated a histogram we had to say well how do we
41:50
actually use this how does that work with the existing features that we already had and we went this you know we integrated a map and we had the same
41:56
question and if you think about the world from what am I building then you
42:02
know you're thinking about your capabilities you might think of each of these features individually and how to build the best best version of these
42:08
features but when you're building a demo you're thinking about it from the customer's perspective and a really good
42:15
demo is something where you show it to the customer and you are creating desire in that customer for what you're doing.
42:22
They have to see what you're doing and just want to reach out and grab it and bring it into their life. And if you see
42:28
that, then you know that you've identified a real pain for the customer. And by doing that, that also forces you
42:34
to develop a better product because not only are you thinking, okay, do each of these features make sense in isolation,
42:39
but how do they work together? Um, if I'm going to be showing this demo over and over again, even just simple things
42:45
like moving from one feature to another, that part of the path has to be very
42:50
straightforward. And those are those are all the kinds of product pain points that you would often see, but only later
42:56
after you've actually deployed to the customer. So, what the demo does is it is it changes the locus of what you're
43:02
thinking about from thinking about what can I build to what is it that the customer wants and am I am I solving
43:09
that painoint for the customer. So it sounds like it's sort of this uh you have to keep doing the gradient ascent
43:15
in this very very highly dimensional multi-dimensional space and you keep changing the variables.
43:20
Yeah. Yeah. I I think yeah maybe maybe that's a really key point here is that
43:25
the kind of company you have to build is a learning company and I think everybody wants to build a learning company but if
43:32
you're a company like Google or Meta it's very easy not to learn because what
43:38
you're doing right now was working and if you just keep doing it the market is growing you know everybody wants to do
43:44
what you're doing you can you can just sort of keep coasting on the same strategy and it's paying off for you my
43:50
advice to people if they're thinking about where to join a company is I tell them to join a young company. Not necessarily a small company,
43:56
right? But a young company because a young company is still figuring things out. It's still learning. It hasn't succeeded yet. You know, if you're just
44:02
out of college, you want a young company that is uh growing really fast and then you'll be you'll see what success looks
44:09
like that positions you exactly to be a founder of your own company later. This is why Palenter has has birthe so many
44:14
other startups is because even as a very large company it is still a company where everybody all the time is learning
44:20
focused on learning and you know always doing that same grinding motion that it
44:27
is to be a new startup because you know yes you know new startups a lot of pain there too right that is like probably
44:32
like the canonical part of the YC experience is that uh it's it's not coasting it's working really really hard
44:39
on something that you're not quite sure if it's going to succeed obviously mean a monster successful palunteer. They're now a super big company, huge
44:45
organization. We heard that you're joining another large organization, the US Army Reserve. Maybe you could tell us
44:52
a bit about that and are there any lessons from the Palunteer experience you're planning to apply there? Yeah, absolutely. I've recently joined
44:59
uh the US Army Reserve as part of Detachment 2011. And so, you know, one one thing just to get out of the way is
45:04
to say that what everything I'm talking about here, these are my opinions. These are not the opinions of the US Army, the
45:10
Defense Department, the US government, but I think it's this it's been this absolutely intense experience and it's a
45:16
really interesting story. So, we are part of a unit that's advising the army
45:21
on technology and we are not just civilian advisers. We are actual officers.
45:27
So, you know, we took the oath. I'm a lieutenant colonel in the US Army. I heard you went through basic training,
45:33
too. I I uh Yeah, we we went through the direct commissioning course. We've been trained by military academics uh often
45:39
at 5 in the morning because that's the time that works for people on the east coast and doesn't conflict with our day jobs. We learn from officers. Uh I had
45:47
to take the army fitness test uh which since I am not very fit uh you know was something that I had to train for for 9
45:53
months. But it really matters because we're not just giving advice on the
45:59
side. We have skin in the game. We are actually part of the organization that
46:04
we're advising and the army itself the leadership is very different from what
46:10
it felt like in the early days of Palinger when we worked with them back in 2005 or 2010. General uh Randy George
46:16
the chief of staff of the army secretary of the army Driscoll um they have articulated a plan for the transformation of the army. They know
46:23
that the army needs to change from, you know, the kind of from fighting the kinds of wars we fought in Iraq and
46:29
Afghanistan to fighting the kind of wars that are being fought today in Ukraine or what it would look like if we face
46:35
large scale combat operations in the Pacific. They know the army needs to move faster. They know the army needs to
46:40
change. And we're a part of that strategy that they're executing. As they've brought us in, they, you know,
46:45
they have given us, they've outlined the priorities for the army. They've given us each an area in which we're supposed
46:51
to operate, but they've also given us the freedom to, you know, go around, look for problems, work directly with
46:57
the officers on the ground to solve those problems, or if need be to escalate that to leadership and get that fixed. And so I think one of the things
47:05
that's that's really interesting about it is, you know, in many ways it does feel a lot like running the FDA
47:10
strategy, you know, on the army. We we get to see, you know, what is the what are the CEOs, what are the leadership's top five priorities? Can we make
47:17
progress against those? But also in a world where you see that there's a disconnect between what the leadership
47:24
wants and 20 years of how things have been implemented and it takes a long
47:29
time to change that. And so, you know, we're helping them make that change. I'm really eager to have the opportunity to
47:36
make a difference. There's a question that we love to ask people on on this podcast, which is what do you think are the best opportunities
47:42
for startup founders to work on right now? Well, you know, I think this really goes back to exactly this question of
47:47
why is it that AI agents are pursuing the FD strategy? And you know, if you if
47:54
you zoom out and I put on my AI research hat uh for once in this podcast,
48:00
I think what we've seen is that that capability improvements are actually extremely fast. Um if you you know yes I
48:07
heard people you know after GBD5 people feel like things are plateauing but actually if you look at this time period
48:12
between April 2024 when the best model you know the release of GBD40 and April
48:18
2025 and the release of 03 that's an extremely fast rate of progress and I I
48:24
think that's just going to continue. I think we're going to see capabilities continue to move quickly. But what's what's really shocking actually is that
48:30
the adoption is not anywhere near what you would expect from the speed of these
48:36
capabilities. What the world is going to look like over the next 5 years is that the capabilities just race ahead and race ahead and race ahead and somehow
48:43
the world feels increasingly benal. You know, you're like you're in your Whimo and you you aren't thinking, oh my god,
48:49
it's not, you know, no one's driving this. You're like, h traffic, it's really slow. Yeah. And so, you know, just like with
48:55
the world of the FDEEs where you have, you know, the FTE is filling the gap between this product and what the
49:00
customers need. I think, you know, the this is a time where there's so much
49:06
availability to fill the gap between what the capabilities can actually do and what the customers are able to
49:13
adopt. And in the early days of AI, if we we sat around a table in 2018 and
49:18
talked about what it looked like when AGI was built, people thought, oh, well, you know, it's it's going to it's going to maybe maybe over the weekend it's
49:25
going to come alive and it's going to take over the world. And, you know, one of the things that I think people missed
49:30
in that was that, you know, AI needs to be adopted. It's something that doesn't
49:37
just happen by itself, but you need human ingenuity and exploration and well
49:43
dealing with a lot of pain in order to make that happen. And so I think there's just a huge amount of opportunity out
49:50
there looking at what are the capabilities that are there, but what does it take to make them really genuinely useful to people?
49:56
There there's an analogy that occurs to me. This might be a little bit forced, but it's almost like OpenAI is the home
50:03
product team and the startups are the FTEEs out figuring out how to get adoption of of of the like research that
50:10
Open AI is cooking up back at the home office. I I think that's not a bad analogy at all. I think that I think that is that
50:16
is maybe the underlying truth of what's making this whole FTE strategy exciting
50:21
again. Okay, that's all we have time for here today. Bob, thanks so much for joining us. That was really really interesting.
50:26
