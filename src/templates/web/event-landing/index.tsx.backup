/**
 * EVENT LANDING PAGE TEMPLATE
 *
 * Full-featured event landing page structure:
 * - Navigation (sticky)
 * - Hero section with video/image and CTA
 * - About section with stats and highlights
 * - Agenda section with day-by-day schedule
 * - Speakers section with bios
 * - Testimonials section
 * - FAQ section
 * - Checkout sidebar (sticky) with ticket selection
 *
 * Theme-agnostic: Accepts any theme for styling.
 */

import { TemplateProps } from "../../types";
import { EventLandingContent } from "./schema";
import styles from "./styles.module.css";

export function EventLandingTemplate({
  page,
  data,
  organization,
  theme,
}: TemplateProps) {
  // Get template content from data.customProperties
  const content =
    (data.customProperties as unknown as EventLandingContent) ||
    ({} as EventLandingContent);

  // Apply theme as CSS variables
  const cssVars = {
    "--color-primary": theme.colors.primary,
    "--color-secondary": theme.colors.secondary,
    "--color-accent": theme.colors.accent,
    "--color-background": theme.colors.background,
    "--color-surface": theme.colors.surface,
    "--color-text": theme.colors.text,
    "--color-textLight": theme.colors.textLight,
    "--color-textDark": theme.colors.textDark,
    "--color-border": theme.colors.border,
    "--color-success": theme.colors.success,
    "--color-error": theme.colors.error,
    "--color-warning": theme.colors.warning,
    "--color-info": theme.colors.info,
    "--font-heading": theme.typography.fontFamily.heading,
    "--font-body": theme.typography.fontFamily.body,
    "--font-mono": theme.typography.fontFamily.mono,
    "--font-size-h1": theme.typography.fontSize.h1,
    "--font-size-h2": theme.typography.fontSize.h2,
    "--font-size-h3": theme.typography.fontSize.h3,
    "--font-size-body": theme.typography.fontSize.body,
    "--font-size-small": theme.typography.fontSize.small,
    "--font-weight-normal": theme.typography.fontWeight.normal,
    "--font-weight-medium": theme.typography.fontWeight.medium,
    "--font-weight-semibold": theme.typography.fontWeight.semibold,
    "--font-weight-bold": theme.typography.fontWeight.bold,
    "--line-height-tight": theme.typography.lineHeight.tight,
    "--line-height-normal": theme.typography.lineHeight.normal,
    "--line-height-relaxed": theme.typography.lineHeight.relaxed,
    "--spacing-xs": theme.spacing.xs,
    "--spacing-sm": theme.spacing.sm,
    "--spacing-md": theme.spacing.md,
    "--spacing-lg": theme.spacing.lg,
    "--spacing-xl": theme.spacing.xl,
    "--spacing-2xl": theme.spacing["2xl"],
    "--spacing-3xl": theme.spacing["3xl"],
    "--spacing-4xl": theme.spacing["4xl"],
    "--border-radius-none": theme.borderRadius.none,
    "--border-radius-sm": theme.borderRadius.sm,
    "--border-radius-md": theme.borderRadius.md,
    "--border-radius-lg": theme.borderRadius.lg,
    "--border-radius-xl": theme.borderRadius.xl,
    "--border-radius-full": theme.borderRadius.full,
    "--shadow-none": theme.shadows.none,
    "--shadow-sm": theme.shadows.sm,
    "--shadow-md": theme.shadows.md,
    "--shadow-lg": theme.shadows.lg,
    "--shadow-xl": theme.shadows.xl,
    "--shadow-2xl": theme.shadows["2xl"],
    "--layout-maxWidth-sm": theme.layout.maxWidth.sm,
    "--layout-maxWidth-md": theme.layout.maxWidth.md,
    "--layout-maxWidth-lg": theme.layout.maxWidth.lg,
    "--layout-maxWidth-xl": theme.layout.maxWidth.xl,
    "--layout-maxWidth-2xl": theme.layout.maxWidth["2xl"],
  } as React.CSSProperties;

  return (
    <div className={styles.template} style={cssVars}>
      {/* Navigation - Sticky at top */}
      <nav className={styles.nav}>
        <div className={styles.navContainer}>
          <div className={styles.navLogo}>{organization.name}</div>
          <div className={styles.navLinks}>
            <a href="#about" className={styles.navLink}>
              About
            </a>
            <a href="#agenda" className={styles.navLink}>
              Agenda
            </a>
            <a href="#speakers" className={styles.navLink}>
              Speakers
            </a>
            <a href="#faq" className={styles.navLink}>
              FAQ
            </a>
          </div>
          <a href="#checkout" className={styles.navCta}>
            Get Tickets
          </a>
        </div>
      </nav>

      {/* Two-column layout: Main content + Sticky sidebar */}
      <div className={styles.layoutGrid}>
        {/* Main Content */}
        <main className={styles.mainContent}>
          {/* Hero Section */}
          {content.hero && (
            <section className={styles.hero} id="hero">
              {/* Background video/image with play button overlay */}
              {(content.hero.videoUrl || content.hero.imageUrl) && (
                <div className={styles.heroBackground}>
                  {content.hero.imageUrl && (
                    <img
                      src={content.hero.imageUrl}
                      alt="Event"
                      className={styles.heroBackgroundImage}
                    />
                  )}
                  {content.hero.videoUrl && (
                    <div className={styles.heroVideoOverlay}>
                      <button className={styles.heroPlayButton}>
                        <svg
                          className={styles.heroPlayIcon}
                          viewBox="0 0 24 24"
                          fill="currentColor"
                        >
                          <path d="M8 5v14l11-7z" />
                        </svg>
                      </button>
                    </div>
                  )}
                </div>
              )}

              {/* Gradient overlay */}
              <div className={styles.heroGradientOverlay} />

              {/* Hero content */}
              <div className={styles.heroContent}>
                {/* Date badge */}
                <div className={styles.heroDateBadge}>
                  {content.hero.date}
                </div>

                {/* Headline with potential accent word */}
                <h1 className={styles.heroTitle}>
                  {content.hero.headline}
                </h1>

                <p className={styles.heroSubtitle}>{content.hero.subheadline}</p>

                {/* Event info with icons */}
                <div className={styles.heroInfo}>
                  <div className={styles.heroInfoItem}>
                    <svg className={styles.heroIcon} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
                      <circle cx="12" cy="10" r="3"/>
                    </svg>
                    <span>{content.hero.location}</span>
                  </div>
                  <span className={styles.heroDivider}>â€¢</span>
                  <div className={styles.heroInfoItem}>
                    <svg className={styles.heroIcon} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                      <line x1="16" y1="2" x2="16" y2="6"/>
                      <line x1="8" y1="2" x2="8" y2="6"/>
                      <line x1="3" y1="10" x2="21" y2="10"/>
                    </svg>
                    <span>{content.hero.format}</span>
                  </div>
                </div>

                {/* CTA buttons */}
                {content.hero.ctaButtons && content.hero.ctaButtons.length > 0 && (
                  <div className={styles.heroButtons}>
                    {content.hero.ctaButtons.map((btn) => (
                      <a
                        key={btn.id}
                        href={btn.url}
                        className={
                          btn.variant === "primary"
                            ? styles.ctaButtonPrimary
                            : styles.ctaButtonOutline
                        }
                      >
                        {btn.text}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            </section>
          )}

          {/* About Section */}
          {content.about && (
            <section className={styles.section} id="about">
              <div className={styles.sectionHeader}>
                <h2 className={styles.sectionTitle}>{content.about.title}</h2>
                <p className={styles.sectionDescription}>
                  {content.about.description}
                </p>
              </div>

              {/* Stats Grid */}
              {content.about.stats && content.about.stats.length > 0 && (
                <div className={styles.statsGrid}>
                  {content.about.stats.map((stat) => (
                    <div key={stat.id} className={styles.statCard}>
                      <div className={styles.statIcon}>{stat.icon}</div>
                      <div className={styles.statValue}>{stat.value}</div>
                      <div className={styles.statLabel}>{stat.label}</div>
                    </div>
                  ))}
                </div>
              )}

              {/* Highlights */}
              {content.about.highlights && content.about.highlights.length > 0 && (
                <div className={styles.highlightsGrid}>
                  {content.about.highlights.map((highlight) => (
                    <div key={highlight.id} className={styles.highlightCard}>
                      <div className={styles.highlightIcon}>{highlight.icon}</div>
                      <h3 className={styles.highlightTitle}>{highlight.title}</h3>
                      <p className={styles.highlightDescription}>
                        {highlight.description}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </section>
          )}

          {/* Agenda Section */}
          {content.agenda && content.agenda.days && content.agenda.days.length > 0 && (
            <section className={styles.section} id="agenda">
              <h2 className={styles.sectionTitle}>{content.agenda.title}</h2>
              <p className={styles.sectionSubtitle}>{content.agenda.subtitle}</p>

              {/* Day tabs or simple list */}
              <div className={styles.agendaDays}>
                {content.agenda.days.map((day) => (
                  <div key={day.id} className={styles.agendaDayContainer}>
                    <h3 className={styles.agendaDayTitle}>{day.date}</h3>
                    <div className={styles.agendaSessions}>
                      {day.sessions.map((session) => (
                        <div
                          key={session.id}
                          className={styles.agendaSessionCard}
                        >
                          {/* Time with clock icon */}
                          <div className={styles.sessionTimeWrapper}>
                            <svg
                              className={styles.sessionIcon}
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                            >
                              <circle cx="12" cy="12" r="10" />
                              <polyline points="12 6 12 12 16 14" />
                            </svg>
                            <span className={styles.sessionTime}>{session.time}</span>
                          </div>

                          {/* Session content */}
                          <div className={styles.sessionContent}>
                            <div className={styles.sessionHeader}>
                              <h4 className={styles.sessionTitle}>{session.title}</h4>
                              <span className={`${styles.sessionType} ${styles[`sessionType-${session.type}`]}`}>
                                {session.type}
                              </span>
                            </div>

                            {session.speaker && (
                              <p className={styles.sessionSpeaker}>{session.speaker}</p>
                            )}

                            {session.location && (
                              <div className={styles.sessionLocation}>
                                <svg
                                  className={styles.sessionIcon}
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                >
                                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z" />
                                  <circle cx="12" cy="10" r="3" />
                                </svg>
                                <span>{session.location}</span>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </section>
          )}

          {/* Speakers Section */}
          {content.speakers && content.speakers.speakers && content.speakers.speakers.length > 0 && (
            <section className={styles.section} id="speakers">
              <h2 className={styles.sectionTitle}>{content.speakers.title}</h2>
              <p className={styles.sectionSubtitle}>{content.speakers.subtitle}</p>

              <div className={styles.speakersGrid}>
                {content.speakers.speakers.map((speaker) => (
                  <div key={speaker.id} className={styles.speakerCard}>
                    {/* Speaker image with aspect-square and hover scale */}
                    <div className={styles.speakerImageWrapper}>
                      <img
                        src={speaker.imageUrl}
                        alt={speaker.name}
                        className={styles.speakerImage}
                      />
                    </div>

                    {/* Speaker info */}
                    <div className={styles.speakerContent}>
                      <h3 className={styles.speakerName}>{speaker.name}</h3>
                      <p className={styles.speakerTitle}>
                        {speaker.role}
                        {speaker.company && `, ${speaker.company}`}
                      </p>
                      <p className={styles.speakerBio}>{speaker.bio}</p>

                      {/* Social links with icons */}
                      {speaker.socialLinks && (
                        <div className={styles.speakerSocial}>
                          {speaker.socialLinks.twitter && (
                            <a
                              href={speaker.socialLinks.twitter}
                              className={styles.socialLink}
                              target="_blank"
                              rel="noopener noreferrer"
                              aria-label="Twitter"
                            >
                              <svg
                                className={styles.socialIcon}
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                              >
                                <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z" />
                              </svg>
                            </a>
                          )}
                          {speaker.socialLinks.linkedin && (
                            <a
                              href={speaker.socialLinks.linkedin}
                              className={styles.socialLink}
                              target="_blank"
                              rel="noopener noreferrer"
                              aria-label="LinkedIn"
                            >
                              <svg
                                className={styles.socialIcon}
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                strokeWidth="2"
                              >
                                <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
                                <rect x="2" y="9" width="4" height="12" />
                                <circle cx="4" cy="4" r="2" />
                              </svg>
                            </a>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </section>
          )}

          {/* Testimonials Section */}
          {content.testimonials && content.testimonials.testimonials && content.testimonials.testimonials.length > 0 && (
            <section className={styles.section} id="testimonials">
              <h2 className={styles.sectionTitle}>{content.testimonials.title}</h2>
              <p className={styles.sectionSubtitle}>{content.testimonials.subtitle}</p>

              <div className={styles.testimonialsGrid}>
                {content.testimonials.testimonials.map((testimonial) => (
                  <div key={testimonial.id} className={styles.testimonialCard}>
                    {/* 5-star rating */}
                    <div className={styles.testimonialStars}>
                      {[...Array(5)].map((_, i) => (
                        <svg
                          key={i}
                          className={styles.starIcon}
                          viewBox="0 0 24 24"
                          fill="currentColor"
                        >
                          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                        </svg>
                      ))}
                    </div>

                    {/* Quote */}
                    <p className={styles.testimonialQuote}>
                      &ldquo;{testimonial.quote}&rdquo;
                    </p>

                    {/* Author info with avatar */}
                    <div className={styles.testimonialAuthor}>
                      {testimonial.imageUrl && (
                        <img
                          src={testimonial.imageUrl}
                          alt={testimonial.author}
                          className={styles.testimonialImage}
                        />
                      )}
                      <div className={styles.testimonialAuthorInfo}>
                        <div className={styles.testimonialName}>
                          {testimonial.author}
                        </div>
                        <div className={styles.testimonialRole}>
                          {testimonial.role}
                          {testimonial.company && `, ${testimonial.company}`}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>
          )}

          {/* FAQ Section */}
          {content.faq && content.faq.questions && content.faq.questions.length > 0 && (
            <section className={styles.section} id="faq">
              <h2 className={styles.sectionTitle}>{content.faq.title}</h2>
              <p className={styles.sectionSubtitle}>{content.faq.subtitle}</p>

              <div className={styles.faqList}>
                {content.faq.questions.map((faq) => (
                  <div key={faq.id} className={styles.faqItem}>
                    <h3 className={styles.faqQuestion}>{faq.question}</h3>
                    <p className={styles.faqAnswer}>{faq.answer}</p>
                  </div>
                ))}
              </div>

              {/* Contact CTA */}
              {content.faq.contactEmail && (
                <div className={styles.faqContact}>
                  <h3 className={styles.faqContactTitle}>Still have questions?</h3>
                  <p className={styles.faqContactText}>
                    Our team is here to help you with any inquiries.
                  </p>
                  <a href={`mailto:${content.faq.contactEmail}`} className={styles.faqContactLink}>
                    {content.faq.contactEmail}
                  </a>
                </div>
              )}
            </section>
          )}
        </main>

        {/* Sticky Checkout Sidebar (Desktop only) */}
        {content.checkout && content.checkout.tickets && content.checkout.tickets.length > 0 && (
          <aside className={styles.sidebar}>
            <div className={styles.sidebarSticky}>
              <div className={styles.checkoutCard} id="checkout">
                <h3 className={styles.checkoutTitle}>{content.checkout.title}</h3>
                {content.checkout.description && (
                  <p className={styles.checkoutDescription}>
                    {content.checkout.description}
                  </p>
                )}

                <div className={styles.ticketOptions}>
                  {content.checkout.tickets.map((ticket) => (
                    <div key={ticket.id} className={styles.ticketOption}>
                      <div className={styles.ticketHeader}>
                        <h4 className={styles.ticketName}>{ticket.name}</h4>
                        <div className={styles.ticketPrice}>
                          <span className={styles.ticketPriceCurrent}>
                            ${ticket.price}
                          </span>
                          {ticket.originalPrice && (
                            <span className={styles.ticketPriceOriginal}>
                              ${ticket.originalPrice}
                            </span>
                          )}
                        </div>
                      </div>
                      <p className={styles.ticketDescription}>{ticket.description}</p>
                      {ticket.features && ticket.features.length > 0 && (
                        <ul className={styles.ticketFeatures}>
                          {ticket.features.map((feature, idx) => (
                            <li key={idx} className={styles.ticketFeature}>
                              <svg
                                className={styles.ticketFeatureIcon}
                                viewBox="0 0 24 24"
                                fill="currentColor"
                              >
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
                              </svg>
                              {feature}
                            </li>
                          ))}
                        </ul>
                      )}
                      <a
                        href={ticket.checkoutUrl}
                        className={styles.ticketButton}
                      >
                        Select Ticket
                      </a>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </aside>
        )}
      </div>

      {/* Mobile Checkout - Fixed at bottom */}
      {content.checkout && content.checkout.tickets && content.checkout.tickets.length > 0 && (
        <div className={styles.mobileCheckout}>
          <div className={styles.mobileCheckoutContent}>
            <div>
              <div className={styles.mobileCheckoutTitle}>Get Your Ticket</div>
              <div className={styles.mobileCheckoutPrice}>
                From ${Math.min(...content.checkout.tickets.map((t) => t.price))}
              </div>
            </div>
            <a href="#checkout" className={styles.mobileCheckoutButton}>
              View Tickets
            </a>
          </div>
        </div>
      )}
    </div>
  );
}
